{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport let CalculatedDamageCollapsedComponent = /*#__PURE__*/(() => {\n  class CalculatedDamageCollapsedComponent {\n    constructor() {\n      this.aimedShotBonus = 600;\n      this.multiShotBonus = 150;\n      this.autoShotAvg = 0;\n      this.autoShotAvgCrit = 0;\n      this.autoShotFinal = 0;\n      this.aimedShotAvg = 0;\n      this.aimedShotAvgCrit = 0;\n      this.aimedShotFinal = 0;\n      this.multiShotAvg = 0;\n      this.multiShotAvgCrit = 0;\n      this.multiShotFinal = 0;\n      this.adjustedSpeed = 0;\n      this.clippedAutos = 0;\n      this.clippedAutoshotDamage = 0;\n      this.clippedMultiShotDamage = 0;\n      this.clippedTotal = 0;\n      this.clippedDPS = 0;\n      this.fullAutoshotDamage = 0;\n      this.fullMultiShotDamage = 0;\n      this.multiShotCoefficient = 0;\n      this.fullCycleTime = 0;\n      this.fullTotal = 0;\n      this.fullDPS = 0;\n      this.shotVars = {\n        slaying: 1,\n        rws: 1,\n        mortal: 2,\n        barrage: 1,\n        gs: 1,\n        avgWeapon: 0,\n        ap: 0\n      };\n    }\n\n    ngOnChanges() {\n      this.baseAP = +this.baseAP;\n      this.criticalStrikeChance = +this.criticalStrikeChance;\n      this.rangedScope = +this.rangedScope;\n      this.ammo = +this.ammo;\n      this.calculateShots();\n    }\n\n    calculateShots() {\n      this.shotVars.avgWeapon = (this.selectedWeapon.dmgMax + this.selectedWeapon.dmgMin) / 2;\n      this.shotVars.ap = +this.baseAP;\n      this.shotVars.slaying = 1 + this.slaying / 100;\n      this.shotVars.rws = 1 + this.rws / 100;\n      this.shotVars.mortal = 2 + this.mortal * 6 / 100;\n      this.shotVars.barrage = 1 + this.barrage * 5 / 100;\n\n      if (this.gs == 1) {\n        this.shotVars.gs = 1.15;\n      } else {\n        this.shotVars.gs = 1;\n      }\n\n      this.calculateAutoShot();\n      this.calculateAimedShot();\n      this.calculateMultiShot();\n      this.calculateShotCycles();\n    }\n\n    calculateAutoShot() {\n      var adjustedCriticalPercentage = (this.criticalStrikeChance - 0.6) / 100;\n      var damage = this.shotVars.ap / 14 * this.selectedWeapon.speed;\n      var rawDamage = damage + +this.rangedScope + this.shotVars.avgWeapon;\n      var ammoDamage = this.ammo * this.selectedWeapon.speed;\n      this.autoShotAvg = this.shotVars.slaying * (ammoDamage + this.shotVars.rws * rawDamage);\n      this.autoShotAvgCrit = this.autoShotAvg * this.shotVars.mortal * this.shotVars.slaying;\n      this.autoShotFinal = this.autoShotAvg * (1 - adjustedCriticalPercentage) + this.autoShotAvgCrit * adjustedCriticalPercentage;\n    }\n\n    calculateAimedShot() {\n      var adjustedCriticalPercentage = (this.criticalStrikeChance - 0.6) / 100;\n      this.aimedShotAvg = this.shotVars.slaying * (this.ammo * this.selectedWeapon.speed + this.shotVars.rws * (this.shotVars.ap / 14 * 2.8 + +this.rangedScope + this.shotVars.avgWeapon + this.aimedShotBonus));\n      this.aimedShotAvgCrit = this.aimedShotAvg * this.shotVars.mortal * this.shotVars.slaying;\n      this.aimedShotFinal = this.aimedShotAvg * (1 - adjustedCriticalPercentage) + this.aimedShotAvgCrit * adjustedCriticalPercentage;\n    }\n\n    calculateMultiShot() {\n      var adjustedCriticalPercentage = (this.criticalStrikeChance - 0.6) / 100;\n      this.multiShotAvg = this.shotVars.barrage * this.shotVars.gs * this.shotVars.slaying * (this.ammo * this.selectedWeapon.speed + this.shotVars.rws * (this.shotVars.ap / 14 * 2.8 + +this.rangedScope + this.shotVars.avgWeapon + this.multiShotBonus));\n      this.multiShotAvgCrit = this.multiShotAvg * this.shotVars.mortal * this.shotVars.slaying;\n      this.multiShotFinal = this.multiShotAvg * (1 - adjustedCriticalPercentage) + this.multiShotAvgCrit * adjustedCriticalPercentage;\n    }\n\n    calculateShotCycles() {\n      this.adjustedSpeed = this.selectedWeapon.speed / 1.15;\n      this.clippedCycle();\n      this.fullCycle();\n    }\n\n    clippedCycle() {\n      var cycleTime = 5.5;\n      var autoShots = 0;\n\n      for (var i = 0; i * this.adjustedSpeed < cycleTime; i++) {\n        this.clippedAutos = i + 1;\n      }\n\n      this.clippedAutoshotDamage = this.clippedAutos * this.autoShotFinal;\n      this.clippedMultiShotDamage = this.multiShotFinal * (6 / 7);\n      this.clippedTotal = this.clippedAutoshotDamage + this.clippedMultiShotDamage + this.aimedShotFinal;\n      this.clippedDPS = this.clippedTotal / 9;\n    }\n\n    fullCycle() {\n      this.fullAutoshotDamage = (this.clippedAutos + 1) * this.autoShotFinal;\n      this.fullCycleTime = this.clippedAutos * this.adjustedSpeed + 3.5;\n\n      if (this.fullCycleTime < 10) {\n        this.multiShotCoefficient = 6 / (10 - this.fullCycleTime) / (1 + 6 / (10 - this.fullCycleTime));\n      } else {\n        this.multiShotCoefficient = 1;\n      }\n\n      this.fullMultiShotDamage = this.multiShotFinal * this.multiShotCoefficient;\n      this.fullTotal = this.fullAutoshotDamage + this.fullMultiShotDamage + this.aimedShotFinal;\n      this.fullDPS = this.fullTotal / this.fullCycleTime;\n    }\n\n  }\n\n  CalculatedDamageCollapsedComponent.ɵfac = function CalculatedDamageCollapsedComponent_Factory(t) {\n    return new (t || CalculatedDamageCollapsedComponent)();\n  };\n\n  CalculatedDamageCollapsedComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalculatedDamageCollapsedComponent,\n    selectors: [[\"calculated-table-collapsed\"]],\n    inputs: {\n      selectedWeapon: \"selectedWeapon\",\n      slaying: \"slaying\",\n      rws: \"rws\",\n      barrage: \"barrage\",\n      mortal: \"mortal\",\n      gs: \"gs\",\n      baseAP: \"baseAP\",\n      criticalStrikeChance: \"criticalStrikeChance\",\n      rangedScope: \"rangedScope\",\n      ammo: \"ammo\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 17,\n    vars: 8,\n    consts: [[1, \"stdTable\"], [2, \"text-align\", \"right\"], [1, \"result\"]],\n    template: function CalculatedDamageCollapsedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0)(1, \"tr\")(2, \"td\");\n        i0.ɵɵtext(3, \"Clipped:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"td\", 1)(5, \"span\", 2);\n        i0.ɵɵtext(6);\n        i0.ɵɵpipe(7, \"number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(8, \" dps\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"tr\")(10, \"td\");\n        i0.ɵɵtext(11, \"Full:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"td\", 1)(13, \"span\", 2);\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(16, \" dps\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 2, ctx.clippedDPS, \"1.1-2\"));\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(15, 5, ctx.fullDPS, \"1.1-2\"));\n      }\n    },\n    dependencies: [i1.DecimalPipe],\n    encapsulation: 2\n  });\n  return CalculatedDamageCollapsedComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}